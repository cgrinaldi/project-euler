// Prompt: Even Fibonacci Numbers
// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//   1, 2, 3, 5, 8, 13, 21, 34, 55, 89
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.

// Memoize will help to make this more efficient
var memoize = function(func) {
  var cache = {};

  return function() {
    var arg = arguments[0];
    if (!(arg in cache)) {
      cache[arg] = func.call(null, arg);
    }
    return cache[arg];
  };
};

// Helper function that will get the nth term
var nthFib = function(n) {
  if (n === 1) {
    return 1;
  }
  if (n === 2) {
    return 2;
  }

  return nthFib(n - 1) + nthFib(n - 2);
};

// Memoize our function
nthFib = memoize(nthFib);

var p2 = function(n) {
  // initialize sum to be 0
  // initialize i to be 1
  // while Fib(i) <= 4 million
  //   if Fib(i) is even
  //     add value to sum
  // return sum

  var sum = 0;
  var i = 1;
  var val = nthFib(i);
  while (val <= n) {
    if (val % 2 === 0) {
      sum += val;
    }
    val = nthFib(++i);
  }
  return sum;
};

console.log(p2(4000000));


